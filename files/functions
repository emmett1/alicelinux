#!/bin/sh

xfetch() {
	[ "$1" ] || exit 1
	filename=${1##*/}
	[ -f "$SOURCE_DIR"/$filename ] && return 0
	msg "Fetching $1..."
	curl -C - -L --fail --ftp-pasv --retry 3 --retry-delay 3 -o "$SOURCE_DIR"/$filename.part $1 && \
		mv "$SOURCE_DIR"/$filename.part "$SOURCE_DIR"/$filename || \
		exit 1
}

xunpack() {
	[ "$1" ] || exit 1
	msg "Unpacking $1..."
	tar -xf "$SOURCE_DIR"/$1 -C $SRC
}

xclean() {
	msg "Cleaning working directory..."
	rm -fr $PKG $SRC
}

xstrip() {
	[ "$1" ] || return
	case "$(file -bi "$1")" in
		*application/x-sharedlib*)  # Libraries (.so)
			${CROSS_COMPILE}strip --strip-unneeded "$1" 2>/dev/null ;;
		*application/x-pie-executable*)  # Libraries (.so)
			${CROSS_COMPILE}strip --strip-unneeded "$1" 2>/dev/null ;;
		*application/x-archive*)    # Libraries (.a)
			${CROSS_COMPILE}strip --strip-debug "$1" 2>/dev/null ;;
		*application/x-object*)
			case "$1" in
				*.ko)                   # Kernel module
					${CROSS_COMPILE}strip --strip-unneeded "$1" 2>/dev/null ;;
				*)
					continue;;
			esac;;
		*application/x-executable*) # Binaries
			${CROSS_COMPILE}strip --strip-all "$1" 2>/dev/null ;;
		*)
			continue ;;
	esac	
}

xcompressman() {
	find . -type f -path "*/man/man*/*" | while read -r file; do
		if [ "$file" = "${file%%.gz}" ]; then
			gzip -9 -f "$file"
		fi
	done
	find . -type l -path "*/man/man*/*" | while read -r file; do
		FILE="${file%%.gz}.gz"
		TARGET="$(readlink $file)"
		TARGET="${TARGET##*/}"
		TARGET="${TARGET%%.gz}.gz"
		DIR=$(dirname "$FILE")
		rm -f $file
		if [ -e "$DIR/$TARGET" ]; then
			ln -sf $TARGET $FILE
		fi
	done
}

xcompressinfo() {
	if [ -d "usr/share/info" ]; then
		find "usr/share/info" -type f | while read -r file; do
			if [ "$file" = "${file%%.gz}" ]; then
				gzip -9 -f "$file"
			fi
		done
	fi
}

xinstall() {	
	cd $PKG
	
	if [ ! "$(find . -maxdepth 1 -type d 2>/dev/null)" ]; then
		echo "error: PKG is empty"
		abort 1
	fi
	
	# remove junk
	[ -f "usr/share/info/dir" ] && rm "usr/share/info/dir"
	[ -f "usr/lib/charset.alias" ] && rm "usr/lib/charset.alias"
	
	# remove libtool files
	find . ! -type d -name "*.la" -delete
	
	# remove empty dirs
	#find . -type d -empty -delete
	
	# compress man-pages
	xcompressman
	
	# compress info pages
	xcompressinfo
	
	# strip binaries & libraries
	find . -type f -printf "%P\n" 2>/dev/null | while read -r binary ; do
		xstrip "$binary"
	done
	
	# check for conflicting files
	find . -type f | while read -r line; do
		line=${line#*/}
		if [ -e "$ROOT_DIR/$line" ] || [ -L "$ROOT_DIR/$line" ]; then
			if [ -s "$DB_DIR/$scriptname" ]; then
				if ! grep -xq "$line" "$DB_DIR/$scriptname"; then
					echo "conflict: $line"
					touch "$WORK_DIR/conflict.$scriptname"
				fi
			else
				echo "conflict: $line"
				touch "$WORK_DIR/conflict.$scriptname"
			fi
		fi
	done
	if [ -f "$WORK_DIR/conflict.$scriptname" ]; then
		echo "!! File conflict found"
		rm "$WORK_DIR/conflict.$scriptname"
		exit 1
	fi
	
	# installing files into system
	msg "Installing '$scriptname-$version'..."
	rsync -Ka . ${ROOT_DIR:-/}
	
	# list dirs
	find . -type d | sed 's/$/\//' | sed 's/^\.\///' | sed '/^$/d' > "$WORK_DIR/db.$scriptname"
	
	# list files including symlinks
	find . \( -type f -o -type l \) | sed 's/^\.\///' | sed '/^$/d' >> "$WORK_DIR/db.$scriptname"
	if [ -s "$DB_DIR/$scriptname" ]; then
		grep -v "/$" "$DB_DIR/$scriptname" | tail -n+2 | tac | while read -r line; do
			case $line in
				*/bin/[|*/bin/[[) continue;;
			esac
			grep -qx "$line" "$WORK_DIR/db.$scriptname" && continue
			rm "$ROOT_DIR/$line"
			echo "removed '$line'"
		done
		grep "/$" "$DB_DIR/$scriptname" | tac | while read -r line; do
			grep -qx "$line" "$WORK_DIR/db.$scriptname" && continue
			if ! grep -x "$line" $DB_DIR/* | grep -vq "$DB_DIR/$scriptname:"; then
				rmdir "$ROOT_DIR/$line"
				echo "removed '$line'"
			fi
		done
		grep -v "/$" "$WORK_DIR/db.$scriptname" | while read -r line; do
			case $line in
				*/bin/[|*/bin/[[) continue;;
			esac
			grep -qx "$line" "$DB_DIR/$scriptname" && continue
			echo "new '$line'"
		done
		grep "/$" "$WORK_DIR/db.$scriptname" | tac | while read -r line; do
			grep -qx "$line" "$WORK_DIR/db.$scriptname" && continue
			echo "new '$line'"
		done
	fi
	
	echo "${version:-0}" > "$DB_DIR/$scriptname"
	sort "$WORK_DIR/db.$scriptname" >> "$DB_DIR/$scriptname"
	rm "$WORK_DIR/db.$scriptname"
	cd - >/dev/null
	xclean
}

msg() {
	[ "$1" ] || return 1
	timestamp="$(date)"
	echo ":: $*"
	echo "$timestamp : [$scriptname] $*" >> "$XPKG_DIR/xpkg.log"
}

# get the script name
scriptname=${0##*/}
scriptname=${scriptname%.sh}

XPKG_DIR="$ROOT_DIR/var/lib/pkg"
DB_DIR="$XPKG_DIR/db"
SOURCE_DIR="$XPKG_DIR/sources"
LOG_DIR="$XPKG_DIR/log"
WORK_DIR="$XPKG_DIR/work"
FILES_DIR="${FILES_DIR:-$XPKG_DIR/files}"

PKG="$WORK_DIR/pkg.$scriptname"
SRC="$WORK_DIR/src.$scriptname"

rm -fr "$PKG" "$SRC"

mkdir -p "$DB_DIR" "$SOURCE_DIR" "$WORK_DIR" "$LOG_DIR" "$PKG" "$SRC"
