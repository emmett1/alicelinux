#!/bin/sh

requiredarg() {
	[ "$1" ] || {
		echo "error: this command required argument"
		exit 2
	}
}

isinstalled() {
	[ "$1" ] || return
	[ -f "$DB_DIR"/$1 ] && return 0 || return 1
}

isexist() {
	[ "$1" ] || return
	[ -f "$SCRIPTS_DIR"/$1.sh ] && return 0 || return 1
}

pkg_install() {
	for i in $@; do
		case $i in
			-dryrun) dryrun=1;;
			-nodep) nodep=1;;
			-*) opt="$opt $i";;
			*) pkg="$pkg $i";;
		esac
	done
	holdpkg="$pkg"; pkg=
	for i in $holdpkg; do
		if isexist $i; then
			isinstalled $i || pkg="$pkg $i"
		fi
	done
	[ "$pkg" ] || exit 0
	if [ "$nodep" != 1 ]; then
		pkg="$(pkg_deplist $pkg)"
	fi
	for i in $pkg; do
		if [ -f "$DB_DIR"/$i ]; then
			if [ "$nodep" != 1 ]; then
				continue
			fi
		fi
		[ -f "$SCRIPTS_DIR"/$i.sh ] || {
			echo "script '$i' not exist!"
			continue
		}
		if [ "$dryrun" = 1 ]; then
			echo "(dryrun) Running script $i..."
		else
			echo "Running script $i..."
			"$SCRIPTS_DIR"/$i.sh $opt || exit 1
		fi
	done
}

pkg_deplist() {
	requiredarg $1
	for i in $@; do
		[ -f "$SCRIPTS_DIR"/$1.sh ] || {
			continue
		}
		dep="$dep $(deplist $i)"
	done
	for i in $dep; do
		echo $d | grep -qw $i && continue
		d="$d $i"
	done
	echo $d | tr ' ' '\n'
}

pkg_depends() {
	requiredarg $1
	[ -f "$SCRIPTS_DIR"/$1.sh ] || {
		echo "script '$1' not exist!"
		exit 1
	}
	getdeps $1
}

pkg_files() {
	requiredarg $1
	[ -f "$DB_DIR"/$1 ] || {
		echo "error: pkg '$1' not installed"
		exit 1
	}
	tail -n +2 "$DB_DIR"/$1
}

pkg_integrity() {
	for i in "$DB_DIR"/*; do
		pkg=${i##*/}
		for u in $(tail -n +2 $i);do
			case $u in
				*/) [ -d /$u ] || echo "$pkg: $u";;
				 *) [ -f /$u ] || echo "$pkg: $u";;
			esac
		done
	done
}

pkg_installed() {
	for i in "$DB_DIR"/*; do
		pkg=${i##*/}
		ver=$(head -n1 $i)
		echo "$pkg $ver"
	done
}

pkg_remove() {
	requiredarg $1
	[ -f "$DB_DIR"/$1 ] || {
		echo "pkg '$1' not installed!"
		exit 1
	}
	ver=$(head -n1 "$DB_DIR"/$1)
	tail -n +2 "$DB_DIR"/$1 | tac | while read -r line; do
		case $line in
			*/) grep "^$i$" "$DB_DIR"/* | grep -qv "$DB_DIR"/$1: || rmdir -v "$line";;
			 *) rm -v "$line";;
		esac
	done
	rm -f "$DB_DIR"/$1
	echo "Removed '$1-$ver'"
}

pkg_help() {
	cat << EOF
usage:
  $(basename $0) <cmd> [<arg>]
   
cmd:
  install   <pkg>   install pkg with dependencies
  depends   <pkg>   show dependencies for pkg
  deplist   <pkg>   show dependencies tree for pkg
  files     <pkg>   show list files installed by pkg
  remove    <pkg>   remove pkg
  installed         list installed pkgs
  integrity         check files and db integrity
   
EOF
}

getdeps() {
	[ -f "$SCRIPTS_DIR"/$1.sh ] || return
	grep "^#depends:" "$SCRIPTS_DIR"/$1.sh \
	| sed 's/^#depends:[[:blank:]]*//' \
	| tr ' ' '\n' \
	| awk '!a[$0]++' \
	| sed 's/,//'
}

deplist() {
	# check currently process for circular dependencies
	# for circular dependencies, found first will take precedence
	[ "$CHECK" ] && {
		if echo $CHECK | tr " " "\n" | grep -qx $1; then
			return 0
		fi
	}
	
	# add package to currently process
	CHECK="$CHECK $1"
	
	# check dependencies
	for i in $(getdeps $1); do
		if ! echo $DEP | tr " " "\n" | grep -qx $i; then
			deplist $i
		fi
	done
	
	# add dependency to list checked dep
	if ! echo $DEP | tr " " "\n" | grep -qx $1; then
		echo "$1"
	fi
	
	# delete item from loop process
	CHECK=$(echo $CHECK | sed "s/$1//")
}

SOURCE_DIR="/var/lib/pkg/sources"
WORK_DIR="/var/lib/pkg/work"
LOG_DIR="/var/lib/pkg/log"
FILES_DIR="/var/lib/pkg/files"
SCRIPTS_DIR="/var/lib/pkg/scripts"
DB_DIR="/var/lib/pkg/db"

cmd=$1
shift

if [ $(command -v pkg_$cmd) ]; then
	pkg_$cmd $@
else
	echo "error: invalid command"
	exit 1
fi

exit 0
